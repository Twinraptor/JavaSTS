package com.codingdojo.tries;
public class Trie {
    public Node root;
    
    public Trie() {
        this.root = new Node();
    }
    
    public void insertWord(String word) {
        // gets the root node;
        Node currentNode = this.root;
        
        // iterates over every character in the word
        for(int i = 0; i < word.length(); i++) {
            // currentLetter is just the character / letter at the iteration
            Character currentLetter = word.charAt(i);
            // ask if the current letter is in the map of the current node
            Node child = currentNode.children.get(currentLetter);
            if(child == null) {
                child = new Node();
                currentNode.children.put(currentLetter, child); 
            } 
            
            currentNode = child;
        }
        currentNode.isCompleteWord = true;
    }
    public boolean isPrefixValid(String prefix) {
    	Node runner=this.root;
    	int i=0;
    	while (runner !=null && prefix.substring(i,i+1)!=null) {
    		char x= prefix.charAt(i);;
    		if (runner.children.containsKey(x)) {
    			runner=runner.children.get(x);
    			i++;
    			if (i>=prefix.length()) {
    				return true;
    			}
    		} else {
    			return false;
    		}
    	}
    	return true;
    }
    
    public boolean isWordValid(String word) {
    	Node runner=this.root;
    	for (int i=0; i<word.length();i++) {
    		char x=word.charAt(i);
    		if (runner.children.containsKey(x)) {
    			runner=runner.children.get(x);
    			i++;
    		} else {
    			return runner.isCompleteWord;
    		}
    	}
		return runner.isCompleteWord;
    }
}